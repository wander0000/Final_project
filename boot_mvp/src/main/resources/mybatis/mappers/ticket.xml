<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "Https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.boot.DAO.TicketDAO">   
      
    <!-- 예매내역 목록 조회(기간별)-->  
    <select id="getTicketListForDays" resultType="com.boot.DTO.ReservetbDTO">
    	SELECT r.*, m.movienm, t.theaternm 
		FROM reservetb r
		LEFT OUTER JOIN (
		    SELECT movieno, movienm 
		    FROM movietb2 
		    UNION
		    SELECT movieno, movienm 
		    FROM boxofficetb
		) m ON r.movieno = m.movieno
		LEFT OUTER JOIN theatertb t ON r.areano = t.areano AND r.theaterno = t.theaterno 
		WHERE r.uuid = #{uuid} AND r.status='예매'
		<include refid="days"></include>
		<include refid="pagenation"></include>
    </select>
    
    <!-- 예매내역 목록의 갯수(기간별)-->
    <select id="getTotalCountForDays">
        SELECT COUNT(*) 
        FROM reservetb r
		WHERE uuid = #{uuid} AND status='예매'
        <include refid="days"></include>
    </select>
    
    <!--  정렬 로직: 기간별 15일,1개월,2개월, 3개월 -->
	<sql id="days">
      <if test="(days == '15')">
       AND r.viewday BETWEEN DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND DATE_ADD(CURDATE(), INTERVAL 8 DAY)
        ORDER BY r.starttime DESC
      </if>
      <if test="(days == '30') or days == null or days == ''">
         AND r.viewday BETWEEN DATE_SUB(CURDATE(), INTERVAL 15 DAY) AND DATE_ADD(CURDATE(), INTERVAL 15 DAY)
         ORDER BY r.starttime DESC
      </if>
      <if test='(days == "60")'>
        AND r.viewday BETWEEN DATE_SUB(CURDATE(), INTERVAL 30 DAY) AND DATE_ADD(CURDATE(), INTERVAL 30 DAY)
         ORDER BY r.starttime DESC
      </if>
      <if test='(days == "90")'>
      	 AND r.viewday BETWEEN DATE_SUB(CURDATE(), INTERVAL 415 DAY) AND DATE_ADD(CURDATE(), INTERVAL 45 DAY)
         ORDER BY r.starttime DESC
      </if>
   </sql>
   
   <sql id="pagenation">
   		LIMIT #{pageSize} OFFSET #{offset}
   </sql>
   
   
   
    <!-- 상영일기준 예매내역 목록 조회(특정연월)-->  
    <select id="getTicketListByScreeningDateForMonth" resultType="com.boot.DTO.ReservetbDTO">
		SELECT r.*, m.movienm
		FROM reservetb r
		JOIN movietb m ON r.movieno = m.movieno
		WHERE r.uuid = #{uuid} AND r.status='예매'
		AND YEAR(r.starttime) = #{year}
		AND MONTH(r.starttime) = #{month}
		ORDER BY r.starttime DESC
		LIMIT #{pageSize} OFFSET #{offset}
    </select>

   
    <!-- 상영일기준 예매내역 목록의 갯수(특정연월)-->
    <select id="getTotalCountByScreeningDateForMonth">
        SELECT COUNT(*) 
		FROM reservetb 
		WHERE uuid = #{uuid} AND status='예매'
		AND YEAR(starttime) = #{year}
		AND MONTH(starttime) = #{month}
		ORDER BY starttime DESC
    </select>
    
    
    <!-- 예매일기준 예매내역 목록 조회(특정연월)-->  
    <select id="getTicketListByReservationDateForMonth" resultType="com.boot.DTO.ReservetbDTO">
		SELECT r.*, m.movienm
		FROM reservetb r
		JOIN movietb m ON r.movieno = m.movieno
		WHERE r.uuid = #{uuid} AND r.status='예매'
		AND YEAR(r.adate) = #{year}
		AND MONTH(r.adate) = #{month}
		ORDER BY r.starttime DESC
		LIMIT #{pageSize} OFFSET #{offset}
    </select>

   
    <!-- 예매일기준 예매내역 목록의 갯수(특정연월)-->
    <select id="getTotalCountByReservationDateForMonth">
        SELECT COUNT(*) 
		FROM reservetb 
		WHERE uuid = #{uuid} AND status='예매'
		AND YEAR(adate) = #{year}
		AND MONTH(adate) = #{month}
		ORDER BY starttime DESC
    </select>
   
    <!--상영일기준 7일전 취소내역 예매내역 목록의 갯수(특정연월)-->
    <select id="getTicketListCanceled" resultType="com.boot.DTO.ReservetbDTO">
		SELECT 
		    r.*, m.movienm
		FROM
		    reservetb r
		    left outer join
		(SELECT 
		    MAX(movieno) AS movieno, 
		    MAX(moviepostimg) AS moviepostimg, 
		    MAX(movienm) AS movienm, 
		    MIN(releaseday) AS releaseday, 
		    MAX(endday) AS endday
		FROM (
		    SELECT 
		        movieno, 
		        moviepostimg, 
		        movienm,  -- 원래의 영화 제목을 보존
		        REPLACE(movienm, ' ', '') AS movienm_nospace, -- 공백이 제거된 영화 제목을 그룹화에 사용
		        releaseday, 
		        endday
		    FROM movietb
		    UNION ALL
		    SELECT 
		        movieno, 
		        moviepostimg, 
		        movienm, 
		        REPLACE(movienm, ' ', '') AS movienm_nospace, 
		        releaseday, 
		        '9999-12-31' AS endday
		    FROM boxofficetb
		) AS movies
		GROUP BY 
		    movienm_nospace,  -- 공백 제거된 영화 제목을 기준으로 그룹화
		    moviepostimg )m ON r.movieno = m.movieno
		WHERE r.uuid = #{uuid}
        AND r.status = '취소' 
        AND r.viewday BETWEEN DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND DATE_ADD(CURDATE(), INTERVAL 7 DAY)
        ORDER BY r.starttime DESC
    </select>
   
   
    <!-- 예매취소 -->
    
	<select id="Call_deleteTicket" statementType="CALLABLE">
        CALL deleteTicket(
            #{v_uuid, mode=IN, jdbcType=VARCHAR},
            #{v_reservenum, mode=IN, jdbcType=VARCHAR}
        )
    </select>
    
    
    <update id="deleteTicket">
		update reservetb set mdate=now(), status='취소' where reservenum =#{reservenum}
    </update>
    <update id="deleteTicketDetail">
		update reserdtltb set mdate=now(), status='취소' where reservenum =#{reservenum}
    </update>
   
   
  
</mapper>



